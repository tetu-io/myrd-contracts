{
  "address": "0x889677E6d07D22a53dac907d204ecBB08E38B529",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShouldUseUpdatePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitForNewPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "WrongStakingToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddStakingToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "RevisionIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "full",
          "type": "bool"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLABLE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTI_POOL_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addStakingToken",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "derivedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "derivedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "derivedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "handleBalanceChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "increaseRevision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "xMyrd_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "myrd_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value_",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value_",
          "type": "address"
        }
      ],
      "name": "isGovernance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isStakeToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "left",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "registerRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rewardTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardsRedirect",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setRewardsRedirect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "updatePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xMyrd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x202d667d11a5cee94d928da1ca711c9415d4106886ab0febd1a472e834365d95",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0x889677E6d07D22a53dac907d204ecBB08E38B529",
    "transactionIndex": 0,
    "gasUsed": "2720303",
    "logsBloom": "0x
    "blockHash": "0x8e1e4aab4ba353a99a3b575c251818a7456fe01ac9574ee235f4ff92922ee0ad",
    "transactionHash": "0x202d667d11a5cee94d928da1ca711c9415d4106886ab0febd1a472e834365d95",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21050817,
        "transactionHash": "0x202d667d11a5cee94d928da1ca711c9415d4106886ab0febd1a472e834365d95",
        "address": "0x889677E6d07D22a53dac907d204ecBB08E38B529",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x8e1e4aab4ba353a99a3b575c251818a7456fe01ac9574ee235f4ff92922ee0ad"
      }
    ],
    "blockNumber": 21050817,
    "cumulativeGasUsed": "2720303",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f25b95755413e96c8a180219e748c24d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShouldUseUpdatePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitForNewPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"WrongStakingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddStakingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTI_POOL_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addStakingToken\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"handleBalanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xMyrd_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"myrd_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsRedirect\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRewardsRedirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"updatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xMyrd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addStakingToken(address)\":{\"details\":\"Only one staking token (xMyrd) is allowed in the current implementation, it's already set in the constructor\"},\"created()\":{\"returns\":{\"_0\":\"Creation timestamp\"}},\"createdBlock()\":{\"returns\":{\"_0\":\"Creation block number\"}},\"derivedBalance(address,address)\":{\"details\":\"Balance of holder adjusted with specific rules for boost calculation.      Supposed to be implemented in a parent contract      Adjust user balance with some logic, like boost logic.\"},\"earned(address,address,address)\":{\"details\":\"Approximate of earned rewards ready to claim\"},\"handleBalanceChange(address)\":{\"details\":\"Must be called from stakingToken when user balance changed.\"},\"increaseRevision(address)\":{\"details\":\"Revision should be increased on each contract upgrade\"},\"init(address,address,address)\":{\"params\":{\"myrd_\":\"is default reward token\",\"xMyrd_\":\"is sole staking token\"}},\"isController(address)\":{\"details\":\"Return true if given address is controller\"},\"isStakeToken(address)\":{\"details\":\"Should return true for whitelisted reward tokens\"},\"lastTimeRewardApplicable(address,address)\":{\"details\":\"Returns the last time the reward was modified or periodFinish if the reward has ended\"},\"left(address,address)\":{\"details\":\"Amount of reward tokens left for the current period\"},\"previousImplementation()\":{\"details\":\"Previous logic implementation\"},\"registerRewardToken(address,address)\":{\"details\":\"Whitelist reward token for staking token. Only operator can do it.\"},\"removeRewardToken(address,address)\":{\"details\":\"Remove from whitelist reward token for staking token. Only operator can do it.      We assume that default token can not be removed.\"},\"revision()\":{\"details\":\"Contract upgrade counter\"},\"rewardPerToken(address,address)\":{\"details\":\"Reward paid for token for the current period.\"},\"rewardTokensLength(address)\":{\"details\":\"Length of rewards tokens array for given token\"},\"setRewardsRedirect(address,address)\":{\"details\":\"Account or governance can setup a redirect of all rewards.      It needs for 3rd party contracts integrations.\"},\"updatePeriod(uint256)\":{\"params\":{\"amount_\":\"Amount of MYRD-rewards for next period = amount_ + penalty received from xMyrd\"}}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version of this contract. Adjust manually on each code modification.\"}},\"title\":\"Stakeless pool for single staking token (xMyrd)\",\"version\":1},\"userdoc\":{\"errors\":{\"ShouldUseUpdatePeriod()\":[{\"notice\":\"Direct call of notifyRewardAmount for MYRD is not allowed, call updatePeriod(additionalMyrdAmount) instead\"}]},\"kind\":\"user\",\"methods\":{\"CONTROLLABLE_VERSION()\":{\"notice\":\"Version of the contract\"},\"addStakingToken(address)\":{\"notice\":\"Allowed contracts can whitelist token. Removing is forbidden.\"},\"controller()\":{\"notice\":\"Return controller address saved in the contract slot\"},\"created()\":{\"notice\":\"Return creation timestamp\"},\"createdBlock()\":{\"notice\":\"Return creation block number\"},\"isGovernance(address)\":{\"notice\":\"Return true if given address is setup as governance in Controller\"},\"rewardsRedirect(address)\":{\"notice\":\"account => recipient. All rewards for this account will receive recipient\"},\"updatePeriod(uint256)\":{\"notice\":\"Update active period. Can be called only once per week. Call IXMyrd.rebase()\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MultiGauge.sol\":\"MultiGauge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"contracts/core/MultiGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./StakelessMultiPoolBase.sol\\\";\\nimport \\\"../interfaces/IGauge.sol\\\";\\nimport \\\"../interfaces/IXMyrd.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../proxy/Controllable.sol\\\";\\n\\n/// @title Stakeless pool for single staking token (xMyrd)\\ncontract MultiGauge is StakelessMultiPoolBase, IGauge {\\n\\n  //region ---------------------- Constants\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant VERSION = \\\"1.0.0\\\";\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"erc7201:myrd.MultiGauge\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 internal constant MULTI_GAUGE_STORAGE_LOCATION = 0x56fe937432a4b636174f357965a052660eeb836d7a87be456fd784604b733000; // erc7201:myrd.MultiGauge\\n\\n  uint public constant REWARDS_PERIOD = 7 days;\\n  //endregion ---------------------- Constants\\n\\n  //region ---------------------- Data types\\n  /// @custom:storage-location erc7201:myrd.MultiGauge\\n  struct MainStorage {\\n    /// @notice XMyrd - the sole staking token\\n    address xMyrd;\\n\\n    /// @notice Current active period (a week number)\\n    uint activePeriod;\\n  }\\n\\n  //endregion ---------------------- Data types\\n\\n  //region ---------------------- Init\\n\\n  /// @param xMyrd_ is sole staking token\\n  /// @param myrd_ is default reward token\\n  function init(address controller_, address xMyrd_, address myrd_) external initializer {\\n    __MultiPool_init(controller_, myrd_, REWARDS_PERIOD);\\n\\n    if(xMyrd_ == address(0)) revert IAppErrors.ZeroAddress();\\n    _S().xMyrd = xMyrd_;\\n  }\\n  //endregion ---------------------- Init\\n\\n  //region ---------------------- Operator actions\\n  /// @notice Allowed contracts can whitelist token. Removing is forbidden.\\n  /// @dev Only one staking token (xMyrd) is allowed in the current implementation, it's already set in the constructor\\n  function addStakingToken(address) external pure /* onlyAllowedContracts */ {\\n    revert IAppErrors.AlreadySet();\\n  }\\n\\n  /// @notice Update active period. Can be called only once per week. Call IXMyrd.rebase()\\n  /// @param amount_ Amount of MYRD-rewards for next period = amount_ + penalty received from xMyrd\\n  function updatePeriod(uint amount_) external {\\n    // no restrictions for msg.sender - anybody can call this function\\n\\n    MainStorage storage $ = _S();\\n    uint _activePeriod = getPeriod();\\n    if ($.activePeriod >= _activePeriod) revert WaitForNewPeriod();\\n\\n    $.activePeriod = _activePeriod;\\n\\n    address _xMyrd = $.xMyrd;\\n    // get MYRD balance before calling rebase()\\n    address _myrd = defaultRewardToken;\\n    uint balanceBefore = IERC20(_myrd).balanceOf(address(this));\\n\\n    // receive penalties from xMyrd (if any)\\n    // xMyrd will transfer penalties directly to this contract\\n    IXMyrd(_xMyrd).rebase();\\n\\n    // notify reward amount if necessary\\n    uint balanceAfter = IERC20(_myrd).balanceOf(address(this));\\n    if (\\n      balanceAfter > balanceBefore // penalties received\\n      || amount_ != 0 // additional amount provided\\n    ) {\\n      // received penalties will be added to the amount_ inside _notifyRewardAmount\\n      _notifyRewardAmount(_S().xMyrd, _myrd, amount_, true, balanceBefore);\\n    }\\n  }\\n  //endregion ---------------------- Operator actions\\n\\n  //region ---------------------- Claim\\n\\n  function getReward(address account, address[] memory tokens) external {\\n    _getReward(_S().xMyrd, account, tokens, account);\\n  }\\n\\n  function getAllRewards(address account) external {\\n    address stakingToken = _S().xMyrd;\\n    address[] storage rts = rewardTokens[stakingToken];\\n    uint length = rts.length;\\n    address[] memory tokens = new address[](length + 1);\\n    for (uint i; i < length; ++i) {\\n      tokens[i] = rts[i];\\n    }\\n    tokens[length] = defaultRewardToken;\\n    _getReward(stakingToken, account, tokens, account);\\n  }\\n\\n  /// @notice Claim rewards for the account\\n  /// @dev Implementation is similar to original one but it has additional logic for MYRD token\\n  function _getReward(address stakingToken, address account, address[] memory rewardTokens_, address recipient) internal /* nonReentrant */ override {\\n    address myrd = defaultRewardToken;\\n    uint len = rewardTokens_.length;\\n\\n    // let's count not MYRD tokens\\n    uint count = 0;\\n    for (uint i = 0; i < len; i++) {\\n      if (rewardTokens_[i] != myrd) count++;\\n    }\\n\\n    // create list of only not MYRD tokens\\n    address[] memory rewardTokensNoMyrd = count == 0\\n      ? rewardTokens_\\n      : _getRewardsTokensWithoutMyrd(rewardTokens_, count, myrd);\\n\\n    if (count != 0) {\\n      // call original implementation (with nonReentrant) for all not-MYRD reward tokens\\n      super._getReward(stakingToken, account, rewardTokensNoMyrd, recipient);\\n    }\\n\\n    if (len != count) {\\n      // MYRD token should be processed, let's do it separately\\n\\n      // -------- same code as in original implementation\\n      address newRecipient = rewardsRedirect[recipient];\\n      if (newRecipient != address(0)) {\\n        recipient = newRecipient;\\n      }\\n      require(recipient == msg.sender, \\\"Not allowed\\\");\\n      _updateDerivedBalance(stakingToken, account);\\n      _updateReward(stakingToken, myrd, account);\\n\\n      uint _reward = rewards[stakingToken][myrd][account];\\n      if (_reward != 0) {\\n        rewards[stakingToken][myrd][account] = 0;\\n\\n        // -------- special behavior for MYRD token: we transfer xMyrd to the recipient instead MYRD\\n        IERC20(myrd).approve(stakingToken, _reward);\\n        IXMyrd(stakingToken).enterFor(_reward, recipient);\\n      }\\n\\n      emit ClaimRewards(account, stakingToken, myrd, _reward, recipient);\\n    }\\n  }\\n\\n  /// @param count Pre-calculated count of not-myrd tokens\\n  function _getRewardsTokensWithoutMyrd(address[] memory rewardTokens_, uint count, address myrd) internal pure returns (address[] memory) {\\n    address[] memory result = new address[](count);\\n    uint j = 0;\\n    uint len = rewardTokens_.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (rewardTokens_[i] != myrd) {\\n        result[j++] = rewardTokens_[i];\\n      }\\n    }\\n    return result;\\n  }\\n\\n  //endregion ---------------------- Claim\\n\\n  //region ---------------------- Virtual deposit/withdraw\\n\\n  /// @dev Must be called from stakingToken when user balance changed.\\n  function handleBalanceChange(address account) external {\\n    address stakingToken = msg.sender;\\n    if (!isStakeToken(stakingToken)) revert WrongStakingToken(stakingToken);\\n\\n    uint stakedBalance = balanceOf[stakingToken][account];\\n    uint actualBalance = IERC20(stakingToken).balanceOf(account);\\n    if (stakedBalance < actualBalance) {\\n      _deposit(stakingToken, account, actualBalance - stakedBalance);\\n    } else if (stakedBalance > actualBalance) {\\n      _withdraw(stakingToken, account, stakedBalance - actualBalance, actualBalance == 0);\\n    }\\n  }\\n\\n  function _deposit(address stakingToken, address account, uint amount) internal {\\n    _registerBalanceIncreasing(stakingToken, account, amount);\\n    emit Deposit(stakingToken, account, amount);\\n  }\\n\\n  function _withdraw(address stakingToken, address account, uint amount, bool fullWithdraw) internal {\\n    _registerBalanceDecreasing(stakingToken, account, amount);\\n    emit Withdraw(stakingToken, account, amount, fullWithdraw);\\n  }\\n  //endregion ---------------------- Virtual deposit/withdraw\\n\\n  //region ---------------------- Logic override\\n  function isStakeToken(address token) public view override returns (bool) {\\n    return _S().xMyrd == token;\\n  }\\n  //endregion ---------------------- Logic override\\n\\n  //region ---------------------- Actions\\n  function notifyRewardAmount(address token, uint amount) external nonReentrant {\\n    // default reward token is MYRD\\n    // it's processed in special way through updatePeriod only\\n    // because amount of rewards is combined from penalties and provided additional amount\\n    if (token == defaultRewardToken) revert IAppErrors.ShouldUseUpdatePeriod();\\n\\n    uint balanceBefore = IERC20(token).balanceOf(address(this));\\n    _notifyRewardAmount(_S().xMyrd, token, amount, true, balanceBefore);\\n  }\\n  //endregion ---------------------- Actions\\n\\n  //region ---------------------- Views\\n\\n  function getPeriod() public view returns (uint) {\\n    return (block.timestamp / REWARDS_PERIOD);\\n  }\\n\\n  function activePeriod() external view returns (uint) {\\n    return _S().activePeriod;\\n  }\\n\\n  function xMyrd() external view returns (address) {\\n    return _S().xMyrd;\\n  }\\n\\n  //endregion ---------------------- Views\\n\\n  //region ---------------------- Internal logic\\n  function _S() internal pure returns (MainStorage storage $) {\\n    //slither-disable-next-line assembly\\n    assembly {\\n      $.slot := MULTI_GAUGE_STORAGE_LOCATION\\n    }\\n    return $;\\n  }\\n  //endregion ------------------------ Internal logic\\n}\\n\",\"keccak256\":\"0x087a973a412e5d010b1a7d427f4c543b15f3149d790d8f5e6ded1c483e00c849\",\"license\":\"MIT\"},\"contracts/core/StakelessMultiPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../interfaces/IMultiPool.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../proxy/Controllable.sol\\\";\\n\\n/// @title Abstract stakeless pool for multiple rewards.\\n///        Universal pool for different purposes, cover the most popular use cases.\\n/// @author belbix, modified by dvpublic\\nabstract contract StakelessMultiPoolBase is ReentrancyGuard, IMultiPool, Controllable {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant MULTI_POOL_VERSION = \\\"1.0.0\\\";\\n  /// @dev Precision for internal calculations\\n  uint internal constant _PRECISION = 10 ** 27;\\n  /// @dev Max reward tokens per 1 staking token\\n  uint internal constant _MAX_REWARD_TOKENS = 10;\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //              Keep names and ordering!\\n  //     Add only in the bottom and adjust __gap variable\\n  // *************************************************************\\n\\n  /// @dev Rewards are released over this period\\n  uint public duration;\\n  /// @dev This token will be always allowed as reward\\n  address public defaultRewardToken;\\n\\n  /// @dev Staking token => Supply adjusted on derived balance logic. Use for rewards boost.\\n  mapping(address => uint) public override derivedSupply;\\n  /// @dev Staking token => Account => Staking token virtual balance. Can be adjusted regarding rewards boost logic.\\n  mapping(address => mapping(address => uint)) public override derivedBalances;\\n  /// @dev Staking token => Account => User virtual balance of staking token.\\n  mapping(address => mapping(address => uint)) public override balanceOf;\\n  /// @dev Staking token => Total amount of attached staking tokens\\n  mapping(address => uint) public override totalSupply;\\n\\n  /// @dev Staking token => Reward token => Reward rate with precision _PRECISION\\n  mapping(address => mapping(address => uint)) public rewardRate;\\n  /// @dev Staking token => Reward token => Reward finish period in timestamp.\\n  mapping(address => mapping(address => uint)) public periodFinish;\\n  /// @dev Staking token => Reward token => Last updated time for reward token for internal calculations.\\n  mapping(address => mapping(address => uint)) public lastUpdateTime;\\n  /// @dev Staking token => Reward token => Part of SNX pool logic. Internal snapshot of reward per token value.\\n  mapping(address => mapping(address => uint)) public rewardPerTokenStored;\\n\\n  /// @dev Staking token => Reward token => Account => amount. Already paid reward amount for snapshot calculation.\\n  mapping(address => mapping(address => mapping(address => uint))) public userRewardPerTokenPaid;\\n  /// @dev Staking token => Reward token => Account => amount. Snapshot of user's reward per token.\\n  mapping(address => mapping(address => mapping(address => uint))) public rewards;\\n\\n  /// @dev Allowed reward tokens for staking token\\n  mapping(address => address[]) public override rewardTokens;\\n  /// @dev Allowed reward tokens for staking token stored in map for fast check.\\n  mapping(address => mapping(address => bool)) public override isRewardToken;\\n  /// @notice account => recipient. All rewards for this account will receive recipient\\n  mapping(address => address) public rewardsRedirect;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event BalanceIncreased(address indexed token, address indexed account, uint amount);\\n  event BalanceDecreased(address indexed token, address indexed account, uint amount);\\n  event NotifyReward(address indexed from, address token, address indexed reward, uint amount);\\n  event ClaimRewards(address indexed account, address token, address indexed reward, uint amount, address recepient);\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  function __MultiPool_init(address controller_, address _defaultRewardToken, uint _duration) internal onlyInitializing {\\n    __Controllable_init(controller_);\\n\\n    require(_defaultRewardToken != address(0), \\\"Zero default reward token\\\");\\n    defaultRewardToken = _defaultRewardToken;\\n\\n    require(_duration != 0, \\\"wrong duration\\\");\\n    duration = _duration;\\n  }\\n\\n  // *************************************************************\\n  //                        RESTRICTIONS\\n  // *************************************************************\\n\\n  modifier onlyAllowedContracts() {\\n    IController _controller = IController(controller());\\n    require(msg.sender == _controller.governance() || _controller.isDeployer(msg.sender), \\\"Not allowed\\\");\\n    _;\\n  }\\n\\n  // *************************************************************\\n  //                            VIEWS\\n  // *************************************************************\\n\\n  /// @dev Should return true for whitelisted reward tokens\\n  function isStakeToken(address token) public view override virtual returns (bool);\\n\\n  /// @dev Length of rewards tokens array for given token\\n  function rewardTokensLength(address token) external view override returns (uint) {\\n    return rewardTokens[token].length;\\n  }\\n\\n  /// @dev Reward paid for token for the current period.\\n  function rewardPerToken(address stakingToken, address rewardToken) public view returns (uint) {\\n    uint _derivedSupply = derivedSupply[stakingToken];\\n    if (_derivedSupply == 0) {\\n      return rewardPerTokenStored[stakingToken][rewardToken];\\n    }\\n\\n    return rewardPerTokenStored[stakingToken][rewardToken]\\n    +\\n    (lastTimeRewardApplicable(stakingToken, rewardToken) - lastUpdateTime[stakingToken][rewardToken])\\n    * rewardRate[stakingToken][rewardToken]\\n    / _derivedSupply;\\n  }\\n\\n  /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\n  function lastTimeRewardApplicable(address stakingToken, address rewardToken) public view returns (uint) {\\n    uint _periodFinish = periodFinish[stakingToken][rewardToken];\\n    return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\\n  }\\n\\n  /// @dev Balance of holder adjusted with specific rules for boost calculation.\\n  ///      Supposed to be implemented in a parent contract\\n  ///      Adjust user balance with some logic, like boost logic.\\n  function derivedBalance(address stakingToken, address account) public view virtual override returns (uint) {\\n    return balanceOf[stakingToken][account];\\n  }\\n\\n  /// @dev Amount of reward tokens left for the current period\\n  function left(address stakingToken, address rewardToken) public view override returns (uint) {\\n    uint _periodFinish = periodFinish[stakingToken][rewardToken];\\n    if (block.timestamp >= _periodFinish) return 0;\\n    uint _remaining = _periodFinish - block.timestamp;\\n    return _remaining * rewardRate[stakingToken][rewardToken] / _PRECISION;\\n  }\\n\\n  /// @dev Approximate of earned rewards ready to claim\\n  function earned(address stakingToken, address rewardToken, address account) public view override returns (uint) {\\n    return derivedBalance(stakingToken, account)\\n    * (rewardPerToken(stakingToken, rewardToken) - userRewardPerTokenPaid[stakingToken][rewardToken][account])\\n    / _PRECISION\\n    + rewards[stakingToken][rewardToken][account];\\n  }\\n\\n  // *************************************************************\\n  //                  OPERATOR ACTIONS\\n  // *************************************************************\\n\\n  /// @dev Whitelist reward token for staking token. Only operator can do it.\\n  function registerRewardToken(address stakeToken, address rewardToken) external override onlyAllowedContracts {\\n    require(rewardTokens[stakeToken].length < _MAX_REWARD_TOKENS, \\\"Too many reward tokens\\\");\\n    require(!isRewardToken[stakeToken][rewardToken] && rewardToken != defaultRewardToken, \\\"Already registered\\\");\\n    isRewardToken[stakeToken][rewardToken] = true;\\n    rewardTokens[stakeToken].push(rewardToken);\\n  }\\n\\n  /// @dev Remove from whitelist reward token for staking token. Only operator can do it.\\n  ///      We assume that default token can not be removed.\\n  function removeRewardToken(address stakeToken, address rewardToken) external override onlyAllowedContracts {\\n    require(periodFinish[stakeToken][rewardToken] < block.timestamp, \\\"Rewards not ended\\\");\\n    require(isRewardToken[stakeToken][rewardToken], \\\"Not reward token\\\");\\n\\n    isRewardToken[stakeToken][rewardToken] = false;\\n    uint length = rewardTokens[stakeToken].length;\\n    uint i = 0;\\n    for (; i < length; i++) {\\n      address t = rewardTokens[stakeToken][i];\\n      if (t == rewardToken) {\\n        break;\\n      }\\n    }\\n    // if isRewardToken map and rewardTokens array changed accordingly the token always exist\\n    rewardTokens[stakeToken][i] = rewardTokens[stakeToken][length - 1];\\n    rewardTokens[stakeToken].pop();\\n  }\\n\\n  /// @dev Account or governance can setup a redirect of all rewards.\\n  ///      It needs for 3rd party contracts integrations.\\n  function setRewardsRedirect(address account, address recipient) external {\\n    require(msg.sender == account || isGovernance(msg.sender), \\\"Not allowed\\\");\\n    rewardsRedirect[account] = recipient;\\n  }\\n\\n  // *************************************************************\\n  //                      BALANCE\\n  // *************************************************************\\n\\n  /// @dev Assume to be called when linked token balance changes.\\n  function _registerBalanceIncreasing(\\n    address stakingToken,\\n    address account,\\n    uint amount\\n  ) internal virtual nonReentrant {\\n    require(isStakeToken(stakingToken), \\\"Staking token not allowed\\\");\\n    require(amount > 0, \\\"Zero amount\\\");\\n\\n    _increaseBalance(stakingToken, account, amount);\\n    emit BalanceIncreased(stakingToken, account, amount);\\n  }\\n\\n  function _increaseBalance(\\n    address stakingToken,\\n    address account,\\n    uint amount\\n  ) internal virtual {\\n    _updateRewardForAllTokens(stakingToken, account);\\n    totalSupply[stakingToken] += amount;\\n    balanceOf[stakingToken][account] += amount;\\n    _updateDerivedBalance(stakingToken, account);\\n  }\\n\\n  /// @dev Assume to be called when linked token balance changes.\\n  function _registerBalanceDecreasing(\\n    address stakingToken,\\n    address account,\\n    uint amount\\n  ) internal nonReentrant virtual {\\n    require(isStakeToken(stakingToken), \\\"Staking token not allowed\\\");\\n    _decreaseBalance(stakingToken, account, amount);\\n    emit BalanceDecreased(stakingToken, account, amount);\\n  }\\n\\n  function _decreaseBalance(\\n    address stakingToken,\\n    address account,\\n    uint amount\\n  ) internal virtual {\\n    _updateRewardForAllTokens(stakingToken, account);\\n    totalSupply[stakingToken] -= amount;\\n    balanceOf[stakingToken][account] -= amount;\\n    _updateDerivedBalance(stakingToken, account);\\n  }\\n\\n  function _updateDerivedBalance(address stakingToken, address account) internal {\\n    uint __derivedBalance = derivedBalances[stakingToken][account];\\n    derivedSupply[stakingToken] -= __derivedBalance;\\n    __derivedBalance = derivedBalance(stakingToken, account);\\n    derivedBalances[stakingToken][account] = __derivedBalance;\\n    derivedSupply[stakingToken] += __derivedBalance;\\n  }\\n\\n  // *************************************************************\\n  //                          CLAIM\\n  // *************************************************************\\n\\n  /// @dev Caller should implement restriction checks\\n  function _getReward(\\n    address stakingToken,\\n    address account,\\n    address[] memory rewardTokens_,\\n    address recipient\\n  ) internal nonReentrant virtual {\\n    address newRecipient = rewardsRedirect[recipient];\\n    if (newRecipient != address(0)) {\\n      recipient = newRecipient;\\n    }\\n    require(recipient == msg.sender, \\\"Not allowed\\\");\\n\\n    _updateDerivedBalance(stakingToken, account);\\n\\n    for (uint i = 0; i < rewardTokens_.length; i++) {\\n      address rewardToken = rewardTokens_[i];\\n      _updateReward(stakingToken, rewardToken, account);\\n\\n      uint _reward = rewards[stakingToken][rewardToken][account];\\n      if (_reward > 0) {\\n        rewards[stakingToken][rewardToken][account] = 0;\\n        IERC20(rewardToken).safeTransfer(recipient, _reward);\\n      }\\n\\n      emit ClaimRewards(account, stakingToken, rewardToken, _reward, recipient);\\n    }\\n  }\\n\\n  // *************************************************************\\n  //                    REWARDS CALCULATIONS\\n  // *************************************************************\\n\\n  function _updateRewardForAllTokens(address stakingToken, address account) internal {\\n    address[] memory rts = rewardTokens[stakingToken];\\n    uint length = rts.length;\\n    for (uint i; i < length; i++) {\\n      _updateReward(stakingToken, rts[i], account);\\n    }\\n    _updateReward(stakingToken, defaultRewardToken, account);\\n  }\\n\\n  function _updateReward(address stakingToken, address rewardToken, address account) internal {\\n    uint _rewardPerTokenStored = rewardPerToken(stakingToken, rewardToken);\\n    rewardPerTokenStored[stakingToken][rewardToken] = _rewardPerTokenStored;\\n    lastUpdateTime[stakingToken][rewardToken] = lastTimeRewardApplicable(stakingToken, rewardToken);\\n    if (account != address(0)) {\\n      rewards[stakingToken][rewardToken][account] = earned(stakingToken, rewardToken, account);\\n      userRewardPerTokenPaid[stakingToken][rewardToken][account] = _rewardPerTokenStored;\\n    }\\n  }\\n\\n  // *************************************************************\\n  //                         NOTIFY\\n  // *************************************************************\\n\\n  /// @notice Notifies the contract about a new reward amount.\\n  /// @param stakingToken The address of the staking token for which the reward is being notified.\\n  /// @param rewardToken The address of the reward token being added.\\n  /// @param amount The amount of the reward that should be transferred from the msg.sender.\\n  /// @param transferRewards A boolean indicating whether the rewards should be transferred to the contract.\\n  /// @param balanceBefore The balance of the reward token in the contract before the transfer.\\n  /// It's calculated outside to have possibility to get additional amounts of the rewards from other sources\\n  /// before calling {_notifyRewardAmount}. Total added rewards amount is calculated by balance changing.\\n  function _notifyRewardAmount(\\n    address stakingToken,\\n    address rewardToken,\\n    uint amount,\\n    bool transferRewards,\\n    uint balanceBefore\\n  ) internal virtual {\\n    require(defaultRewardToken == rewardToken || isRewardToken[stakingToken][rewardToken], \\\"Token not allowed\\\");\\n\\n    _updateReward(stakingToken, rewardToken, address(0));\\n    uint _duration = duration;\\n\\n    if (transferRewards) {\\n      if (amount != 0) {\\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\\n      }\\n    }\\n\\n    // refresh amount if token was taxable OR balance was changed from balanceBefore in other way\\n    amount = IERC20(rewardToken).balanceOf(address(this)) - balanceBefore;\\n    require(amount > 0, \\\"Zero amount\\\");\\n\\n    // if transferRewards=false need to wisely use it in implementation!\\n\\n    if (block.timestamp >= periodFinish[stakingToken][rewardToken]) {\\n      rewardRate[stakingToken][rewardToken] = amount * _PRECISION / _duration;\\n    } else {\\n      uint _remaining = periodFinish[stakingToken][rewardToken] - block.timestamp;\\n      uint _left = _remaining * rewardRate[stakingToken][rewardToken];\\n      // rewards should not extend period infinity, only higher amount allowed\\n      require(amount > _left / _PRECISION, \\\"Amount should be higher than remaining rewards\\\");\\n      rewardRate[stakingToken][rewardToken] = (amount * _PRECISION + _left) / _duration;\\n    }\\n\\n    lastUpdateTime[stakingToken][rewardToken] = block.timestamp;\\n    periodFinish[stakingToken][rewardToken] = block.timestamp + _duration;\\n    emit NotifyReward(msg.sender, stakingToken, rewardToken, amount);\\n  }\\n\\n  /**\\n* @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n  uint[38] private __gap;\\n}\\n\",\"keccak256\":\"0xd9a35e5938db8c129bf5a7001e36566bbb5955402f9409f933ae6cea35d5273f\",\"license\":\"MIT\"},\"contracts/interfaces/IAppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\n/// @notice All errors of the app\\ninterface IAppErrors {\\n  error NotController();\\n  error NotDeployer();\\n  error NotGovernance();\\n  error NotOwner();\\n  error NotGauge();\\n  error IncorrectArrayLength();\\n  error IncorrectZeroArgument();\\n  error IncorrectZeroAddress();\\n  error AlreadySet();\\n  error ZeroAddress();\\n\\n  /// @notice Direct call of notifyRewardAmount for MYRD is not allowed, call updatePeriod(additionalMyrdAmount) instead\\n  error ShouldUseUpdatePeriod();\\n}\",\"keccak256\":\"0x4cbf31cf0eb03df35cb3afb88602bba111a4ccb9d52b71febc17e59ff892dacd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IControllable {\\n\\n  function VERSION() external pure returns (string memory);\\n\\n  function revision() external view returns (uint);\\n\\n  function previousImplementation() external view returns (address);\\n\\n  function isController(address contract_) external view returns (bool);\\n\\n  function isGovernance(address contract_) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0x296b634c46b5d178b2408523fcf569ed370e20a719b7b3f2183b278631b94f65\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IController {\\n\\n  function governance() external view returns (address);\\n\\n  function isDeployer(address adr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x665674ae80ce3a596d5ab7479191562922e88032de3c149952005e4d8f370886\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IGauge {\\n\\n  error WaitForNewPeriod();\\n  error WrongStakingToken(address stakingToken);\\n\\n  event AddStakingToken(address token);\\n  event Deposit(address indexed stakingToken, address indexed account, uint amount);\\n  event Withdraw(address indexed stakingToken, address indexed account, uint amount, bool full);\\n\\n\\n  function getReward(address account, address[] memory tokens) external;\\n\\n  function getAllRewards(address account) external;\\n\\n  function handleBalanceChange(address account) external;\\n\\n  function notifyRewardAmount(address token, uint amount) external;\\n\\n  function addStakingToken(address token) external;\\n\\n  function getPeriod() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x453b2f8498f7ca17c9735c28a0ec515c6c2db77760b74add9eb6360df5955a3f\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IMultiPool {\\n\\n  function totalSupply(address stakingToken) external view returns (uint);\\n\\n  function derivedSupply(address stakingToken) external view returns (uint);\\n\\n  function derivedBalances(address stakingToken, address account) external view returns (uint);\\n\\n  function balanceOf(address stakingToken, address account) external view returns (uint);\\n\\n  function rewardTokens(address stakingToken, uint id) external view returns (address);\\n\\n  function isRewardToken(address stakingToken, address token) external view returns (bool);\\n\\n  function rewardTokensLength(address stakingToken) external view returns (uint);\\n\\n  function derivedBalance(address stakingToken, address account) external view returns (uint);\\n\\n  function left(address stakingToken, address token) external view returns (uint);\\n\\n  function earned(address stakingToken, address token, address account) external view returns (uint);\\n\\n  function registerRewardToken(address stakingToken, address token) external;\\n\\n  function removeRewardToken(address stakingToken, address token) external;\\n\\n  function isStakeToken(address token) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xd98464b14f917eb475439ddf20aa9f8716c671bd41c1d4e25e0677aa1ffad070\",\"license\":\"MIT\"},\"contracts/interfaces/IXMyrd.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IXMyrd {\\n\\n    // ------------------------------ Data types\\n    struct VestPosition {\\n        /// @dev amount of xMyrd\\n        uint amount;\\n        /// @dev start unix timestamp\\n        uint start;\\n        /// @dev start + MAX_VEST (end timestamp)\\n        uint maxEnd;\\n        /// @dev vest identifier (starting from 0)\\n        uint vestID;\\n    }\\n\\n\\n    // ------------------------------ Errors\\n\\n    error NO_VEST();\\n    error NOT_WHITELISTED(address from, address to);\\n\\n\\n    // ------------------------------ Events\\n    \\n    event Enter(address indexed user, uint amount);\\n    event InstantExit(address indexed user, uint exitAmount);\\n    event NewVest(address indexed user, uint indexed vestId, uint amount);\\n    event CancelVesting(address indexed user, uint indexed vestId, uint amount);\\n    event ExitVesting(address indexed user, uint indexed vestId, uint totalAmount, uint exitedAmount);\\n    event ExemptionFrom(address indexed candidate, bool status, bool success);\\n    event ExemptionTo(address indexed candidate, bool status, bool success);\\n    event Rebase(address indexed caller, uint amount);\\n\\n\\n    // ------------------------------ Write functions\\n\\n    /// @dev Mints xMyrd for each Myrd\\n    function enter(uint amount_) external;\\n\\n    /// @dev Mints xMyrd for each Myrd and put the xMyrd on balance of the given recipient\\n    function enterFor(uint amount_, address recipient) external;\\n\\n    /// @dev Exit instantly with a penalty\\n    /// @param amount_ Amount of xMyrd to exit\\n    function exit(uint amount_) external returns (uint exitedAmount);\\n\\n    /// @dev Vesting xMyrd --> Myrd functionality\\n    function createVest(uint amount_) external;\\n\\n    /// @dev Handles all situations regarding exiting vests\\n    function exitVest(uint vestID_) external;\\n\\n    /// @notice Set exemption status for from address\\n    function setExemptionFrom(address[] calldata exemptee, bool[] calldata exempt) external;\\n\\n    /// @notice Set exemption status for to address\\n    function setExemptionTo(address[] calldata exemptee, bool[] calldata exempt) external;\\n\\n    /// @notice Function called by the gauge to send the rebases once a week\\n    function rebase() external;\\n\\n\\n    // ------------------------------ View functions\\n\\n    /// @notice Denominator\\n    function BASIS() external view returns (uint);\\n\\n    /// @notice Max slashing amount\\n    function SLASHING_PENALTY() external view returns (uint);\\n\\n    /// @notice The minimum vesting length\\n    function MIN_VEST() external view returns (uint);\\n\\n    /// @notice The maximum vesting length\\n    function MAX_VEST() external view returns (uint);\\n\\n    /// @notice Myrd address\\n    function myrd() external view returns (address);\\n\\n    /// @notice Gauge address\\n    function gauge() external view returns (address);\\n\\n    /// @notice returns info on a user's vests\\n    function vestInfo(address user, uint vestId) external view returns (uint amount, uint start, uint maxEnd);\\n\\n    /// @notice Returns the total number of individual vests the user has\\n    function usersTotalVests(address who) external view returns (uint numOfVests);\\n\\n    /// @notice Amount of pvp rebase penalties accumulated pending to be distributed\\n    function pendingRebase() external view returns (uint);\\n\\n    /// @notice The last period rebases were distributed\\n    function lastDistributedPeriod() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x846a48de49e6bce86ea7e25c1d2b1d340debcb277b5fd6103e54ca69b50460ba\",\"license\":\"MIT\"},\"contracts/lib/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x52ede981a6bb509c0dce07a0373e3c073c24fd16ca4ca7fbaa24f6c8b747b45b\",\"license\":\"BUSL-1.1\"},\"contracts/openzeppelin/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1a428e27a784eb74ecb32a09dd1fbe69d6870c22186046169917282e9024f0a\",\"license\":\"MIT\"},\"contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"./Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x3c086fdcb00ff0d2cce86c9c0166fbd0a507a60379b82736f73e713a366e0bea\",\"license\":\"MIT\"},\"contracts/openzeppelin/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/openzeppelin/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IERC1363} from \\\"../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4b0b4a73303aa5891494b08aee25c4158096c35d9850d3979b5d05a79ac51a5c\",\"license\":\"MIT\"},\"contracts/proxy/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../lib/SlotsLib.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract Controllable is Initializable, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"1.0.0\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  // init implementation contract\\n  constructor() initializer {}\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    _init(controller_);\\n  }\\n\\n  function _init(address controller_) private {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address value_) public override view returns (bool) {\\n    return value_ == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address value_) public override view returns (bool) {\\n    return IController(controller()).governance() == value_;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view override returns (uint) {\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view override returns (address) {\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xa5dc1d7d001ec6feae11da98fc8fb440ac653c19fa29ef7d5ec5b879f6d71012\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600160009081557ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054909168010000000000000000820460ff1615916001600160401b03169081158015620000655750825b90506000826001600160401b03166001148015620000825750303b155b90508115801562000091575080155b15620000b05760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000df57845460ff60401b1916680100000000000000001785555b83156200012657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050612f4f806200013b6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c806379251d8811610167578063bde4ad12116100ce578063e4dc2aa411610087578063e4dc2aa41461068a578063f2c2c2c9146106aa578063f77c4791146106bd578063f7888aec146106c5578063ff3a4ac0146106f0578063ffa1ad741461045d57600080fd5b8063bde4ad1214610600578063c588ee5b14610613578063c804a0191461063e578063dee1f0e414610651578063dffaf44914610664578063e270d1df1461067757600080fd5b80639d0bcca0116101205780639d0bcca014610565578063ab674e0c1461056d578063b02bf8d814610596578063b429afeb146105c7578063b5a18215146105da578063b66503cf146105ed57600080fd5b806379251d88146104e457806379d83f8e146104f75780637cc963801461050c57806381a4af1514610514578063884e0e6614610527578063936725ec1461045d57600080fd5b80633609582a1161020b5780635c0a1bf8116101c45780635c0a1bf8146104175780636180c3f9146104215780636210c7431461043457806365a9111c1461045d578063693d1dc21461048e5780636f4fcf71146104b957600080fd5b80633609582a14610398578063362a3fad146103ab57806339fee755146103be5780634593144c146103e95780634d9c6cb0146103f15780634fac6ccd1461040457600080fd5b806321985e131161025d57806321985e13146102fb5780632a9dd0ce1461030e5780632b72cee71461033f5780632f88b48d1461035257806331279d3d1461037d578063325a19f11461039057600080fd5b80630a441f7b1461029a5780630dc07112146102b55780630fb5a6b4146102d5578063184b9559146102de5780631ed24195146102f3575b600080fd5b6102a2610703565b6040519081526020015b60405180910390f35b6102a26102c3366004612ba2565b60036020526000908152604090205481565b6102a260015481565b6102f16102ec366004612bc6565b610716565b005b6102a2610867565b6102f1610309366004612ba2565b61087b565b6102a261031c366004612bc6565b600c60209081526000938452604080852082529284528284209052825290205481565b6102a261034d366004612c11565b610894565b6102a2610360366004612c11565b600960209081526000928352604080842090915290825290205481565b6102f161038b366004612c60565b610984565b6102a26109a5565b6102f16103a6366004612c11565b6109d9565b6102f16103b9366004612ba2565b610a47565b6102a26103cc366004612c11565b600a60209081526000928352604080842090915290825290205481565b6102a2610b83565b6102a26103ff366004612c11565b610bb3565b6102f1610412366004612ba2565b610bf1565b6102a262093a8081565b6102a261042f366004612c11565b610d23565b6102a2610442366004612ba2565b6001600160a01b03166000908152600d602052604090205490565b610481604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516102ac9190612d3a565b6102a261049c366004612c11565b600460209081526000928352604080842090915290825290205481565b6102a26104c7366004612c11565b600760209081526000928352604080842090915290825290205481565b6102f16104f2366004612c11565b610dbb565b6104ff611119565b6040516102ac9190612d89565b6102a2611132565b6104ff610522366004612d9d565b611162565b610555610535366004612c11565b600e60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102ac565b6104ff61119a565b6104ff61057b366004612ba2565b600f602052600090815260409020546001600160a01b031681565b6102a26105a4366004612bc6565b600b60209081526000938452604080852082529284528284209052825290205481565b6105556105d5366004612ba2565b6111ca565b6102a26105e8366004612c11565b6111ef565b6102f16105fb366004612d9d565b61121a565b6102a261060e366004612bc6565b6112ed565b6102a2610621366004612c11565b600860209081526000928352604080842090915290825290205481565b61055561064c366004612ba2565b61138f565b61055561065f366004612ba2565b6113b4565b6102f1610672366004612c11565b611439565b6102f1610685366004612dc9565b611695565b6102a2610698366004612ba2565b60066020526000908152604090205481565b6102f16106b8366004612ba2565b611855565b6104ff611951565b6102a26106d3366004612c11565b600560209081526000928352604080842090915290825290205481565b6002546104ff906001600160a01b031681565b600061070d611981565b60010154905090565b60006107206119a5565b805490915060ff600160401b820416159067ffffffffffffffff166000811580156107485750825b905060008267ffffffffffffffff1660011480156107655750303b155b905081158015610773575080155b156107915760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156107bb57845460ff60401b1916600160401b1785555b6107c9888762093a806119ce565b6001600160a01b0387166107f05760405163d92e233d60e01b815260040160405180910390fd5b866107f9611981565b80546001600160a01b0319166001600160a01b0392909216919091179055831561085d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600061087662093a8042612df8565b905090565b60405163a741a04560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600360205260408120548082036108e15750506001600160a01b038083166000908152600a602090815260408083209385168352929052205461097e565b6001600160a01b0380851660008181526007602090815260408083209488168084529482528083205493835260098252808320948352939052919091205482919061092c8787610bb3565b6109369190612e1a565b6109409190612e2d565b61094a9190612df8565b6001600160a01b038086166000908152600a602090815260408083209388168352929052205461097a9190612e44565b9150505b92915050565b6109a161098f611981565b546001600160a01b0316838381611a99565b5050565b60006108766109d560017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612e1a565b5490565b336001600160a01b03831614806109f457506109f4336113b4565b610a195760405162461bcd60e51b8152600401610a1090612e57565b60405180910390fd5b6001600160a01b039182166000908152600f6020526040902080546001600160a01b03191691909216179055565b6000610a51611981565b546001600160a01b03166000818152600d6020526040812080549293509190610a7b826001612e44565b67ffffffffffffffff811115610a9357610a93612c4a565b604051908082528060200260200182016040528015610abc578160200160208202803683370190505b50905060005b82811015610b2c57838181548110610adc57610adc612e7c565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610b0c57610b0c612e7c565b6001600160a01b0390921660209283029190910190910152600101610ac2565b5060025481516001600160a01b0390911690829084908110610b5057610b50612e7c565b60200260200101906001600160a01b031690816001600160a01b031681525050610b7c84868388611a99565b5050505050565b60006108766109d560017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612e1a565b6001600160a01b038083166000908152600860209081526040808320938516835292905290812054428111610be8578061097a565b50429392505050565b333014610c405760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e00000000006044820152606401610a10565b6000610c706109d560017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd612e1a565b610c7b906001612e44565b9050610caf81610cac60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd612e1a565b55565b610cde82610cac60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612e1a565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6001600160a01b038083166000908152600860209081526040808320938516835292905290812054428111610d5c57600091505061097e565b6000610d684283612e1a565b6001600160a01b03808716600090815260076020908152604080832093891683529290522054909150676765c793fa10079d601b1b90610da89083612e2d565b610db29190612df8565b95945050505050565b6000610dc5611951565b9050806001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190612e92565b6001600160a01b0316336001600160a01b03161480610eb05750604051631430d62960e21b81526001600160a01b038216906350c358a490610e6f903390600401612d89565b602060405180830381865afa158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190612eaf565b610ecc5760405162461bcd60e51b8152600401610a1090612e57565b6001600160a01b038084166000908152600860209081526040808320938616835292905220544211610f345760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610a10565b6001600160a01b038084166000908152600e602090815260408083209386168352929052205460ff16610f9c5760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610a10565b6001600160a01b038084166000818152600e602090815260408083209487168352938152838220805460ff19169055918152600d90915290812054905b8181101561103b576001600160a01b0385166000908152600d6020526040812080548390811061100b5761100b612e7c565b6000918252602090912001546001600160a01b03908116915085168103611032575061103b565b50600101610fd9565b6001600160a01b0385166000908152600d6020526040902061105e600184612e1a565b8154811061106e5761106e612e7c565b60009182526020808320909101546001600160a01b038881168452600d90925260409092208054919092169190839081106110ab576110ab612e7c565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559187168152600d909152604090208054806110f0576110f0612ed1565b600082815260209020810160001990810180546001600160a01b03191690550190555050505050565b6000611123611981565b546001600160a01b0316919050565b60006108766109d560017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd612e1a565b600d602052816000526040600020818154811061117e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006108766109d560017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612e1a565b60006111d4611951565b6001600160a01b0316826001600160a01b0316149050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b611222611d2b565b6002546001600160a01b039081169083160361125157604051639288929360e01b815260040160405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190611280903090600401612d89565b602060405180830381865afa15801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c19190612ee7565b90506112e26112ce611981565b546001600160a01b03168484600185611d55565b506109a16001600055565b6001600160a01b038084166000818152600c6020908152604080832087861680855290835281842095871680855295835281842054948452600b8352818420908452825280832094835293905291822054676765c793fa10079d601b1b906113558787610894565b61135f9190612e1a565b61136987866111ef565b6113739190612e2d565b61137d9190612df8565b6113879190612e44565b949350505050565b6000816001600160a01b03166113a3611981565b546001600160a01b03161492915050565b6000816001600160a01b03166113c8611951565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612e92565b6001600160a01b03161492915050565b6000611443611951565b9050806001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a79190612e92565b6001600160a01b0316336001600160a01b0316148061152e5750604051631430d62960e21b81526001600160a01b038216906350c358a4906114ed903390600401612d89565b602060405180830381865afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190612eaf565b61154a5760405162461bcd60e51b8152600401610a1090612e57565b6001600160a01b0383166000908152600d6020526040902054600a116115ab5760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e792072657761726420746f6b656e7360501b6044820152606401610a10565b6001600160a01b038084166000908152600e602090815260408083209386168352929052205460ff161580156115ef57506002546001600160a01b03838116911614155b6116305760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610a10565b506001600160a01b039182166000818152600e6020908152604080832094909516808352938152848220805460ff19166001908117909155928252600d81529381208054928301815581529290922090910180546001600160a01b0319169091179055565b600061169f611981565b905060006116ab610867565b9050808260010154106116d157604051638e8f3c7f60e01b815260040160405180910390fd5b6001820181905581546002546040516370a0823160e01b81526001600160a01b03928316929091169060009082906370a0823190611713903090600401612d89565b602060405180830381865afa158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117549190612ee7565b9050826001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03851691506370a08231906117d8903090600401612d89565b602060405180830381865afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190612ee7565b90508181118061182857508615155b1561184c5761184c611838611981565b546001600160a01b03168489600186611d55565b50505050505050565b3361185f8161138f565b61187e5780604051631160c15360e31b8152600401610a109190612d89565b6001600160a01b03808216600081815260056020908152604080832094871683529390528281205492516370a0823160e01b81529091906370a08231906118c9908790600401612d89565b602060405180830381865afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a9190612ee7565b90508082101561192d5761192883856119238585612e1a565b612113565b61194b565b8082111561194b5761194b83856119448486612e1a565b8415612170565b50505050565b60006108766109d560017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612e1a565b7f56fe937432a4b636174f357965a052660eeb836d7a87be456fd784604b73300090565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061097e565b6119d66121cb565b6119df836121f2565b6001600160a01b038216611a355760405162461bcd60e51b815260206004820152601960248201527f5a65726f2064656661756c742072657761726420746f6b656e000000000000006044820152606401610a10565b600280546001600160a01b0319166001600160a01b0384161790556000819003611a925760405162461bcd60e51b815260206004820152600e60248201526d3bb937b73390323ab930ba34b7b760911b6044820152606401610a10565b6001555050565b60025482516001600160a01b03909116906000805b82811015611afe57836001600160a01b0316868281518110611ad257611ad2612e7c565b60200260200101516001600160a01b031614611af65781611af281612f00565b9250505b600101611aae565b5060008115611b1757611b12868386612206565b611b19565b855b90508115611b2d57611b2d888883886122fe565b81831461085d576001600160a01b038086166000908152600f6020526040902054168015611b59578095505b6001600160a01b0386163314611b815760405162461bcd60e51b8152600401610a1090612e57565b611b8b8989612470565b611b9689868a612517565b6001600160a01b03808a166000908152600c6020908152604080832089851684528252808320938c16835292905220548015611ccc576001600160a01b038a81166000818152600c602090815260408083208b8616808552908352818420958f16845294909152808220919091555163095ea7b360e01b815260048101919091526024810183905263095ea7b3906044016020604051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190612eaf565b50604051626352e160e11b8152600481018290526001600160a01b0388811660248301528b169062c6a5c290604401600060405180830381600087803b158015611cb357600080fd5b505af1158015611cc7573d6000803e3d6000fd5b505050505b604080516001600160a01b038c8116825260208201849052898116828401529151888316928c16917f88744b3615a11586336358f196290c37189c924b0ce7f612d07789041af7cde4919081900360600190a350505050505050505050565b600260005403611d4e57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6002546001600160a01b0385811691161480611d9657506001600160a01b038086166000908152600e602090815260408083209388168352929052205460ff165b611dd65760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610a10565b611de285856000612517565b6001548215611e06578315611e0657611e066001600160a01b0386163330876125ec565b6040516370a0823160e01b815282906001600160a01b038716906370a0823190611e34903090600401612d89565b602060405180830381865afa158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e759190612ee7565b611e7f9190612e1a565b935060008411611ebf5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610a10565b6001600160a01b038087166000908152600860209081526040808320938916835292905220544210611f365780611f01676765c793fa10079d601b1b86612e2d565b611f0b9190612df8565b6001600160a01b038088166000908152600760209081526040808320938a168352929052205561206f565b6001600160a01b038087166000908152600860209081526040808320938916835292905290812054611f69904290612e1a565b6001600160a01b038089166000908152600760209081526040808320938b1683529290529081205491925090611f9f9083612e2d565b9050611fb6676765c793fa10079d601b1b82612df8565b861161201b5760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610a10565b8281612032676765c793fa10079d601b1b89612e2d565b61203c9190612e44565b6120469190612df8565b6001600160a01b03808a166000908152600760209081526040808320938c168352929052205550505b6001600160a01b03808716600090815260096020908152604080832093891683529290522042908190556120a4908290612e44565b6001600160a01b038781166000818152600860209081526040808320948b1680845294825291829020949094558051918252928101879052909133917f8bc5b8ae8531594dc64933af585227ad004b32082b540c609664369a112e2c18910160405180910390a3505050505050565b61211e838383612653565b816001600160a01b0316836001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628360405161216391815260200190565b60405180910390a3505050565b61217b848484612751565b6040805183815282151560208201526001600160a01b0380861692908716917f2b664ab52fe561d3ace376046aea39744dd736ec1f67d89d504ffd2192825f61910160405180910390a350505050565b6121d36127fa565b6121f057604051631afcd79f60e31b815260040160405180910390fd5b565b6121fa6121cb565b61220381612814565b50565b606060008367ffffffffffffffff81111561222357612223612c4a565b60405190808252806020026020018201604052801561224c578160200160208202803683370190505b508551909150600090815b818110156122f257856001600160a01b031688828151811061227b5761227b612e7c565b60200260200101516001600160a01b0316146122ea578781815181106122a3576122a3612e7c565b60200260200101518484806122b790612f00565b9550815181106122c9576122c9612e7c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b600101612257565b50919695505050505050565b612306611d2b565b6001600160a01b038082166000908152600f602052604090205416801561232b578091505b6001600160a01b03821633146123535760405162461bcd60e51b8152600401610a1090612e57565b61235d8585612470565b60005b835181101561246457600084828151811061237d5761237d612e7c565b60200260200101519050612392878288612517565b6001600160a01b038088166000908152600c6020908152604080832085851684528252808320938a16835292905220548015612407576001600160a01b038089166000908152600c60209081526040808320868516808552908352818420948c16845293909152812055612407908683612933565b604080516001600160a01b038a8116825260208201849052878116828401529151848316928a16917f88744b3615a11586336358f196290c37189c924b0ce7f612d07789041af7cde4919081900360600190a35050600101612360565b505061194b6001600055565b6001600160a01b038083166000818152600460209081526040808320948616835293815283822054928252600390529182208054919283926124b3908490612e1a565b909155506124c3905083836111ef565b6001600160a01b038085166000818152600460209081526040808320948816835293815283822085905591815260039091529081208054929350839290919061250d908490612e44565b9091555050505050565b60006125238484610894565b6001600160a01b038086166000908152600a6020908152604080832093881683529290522081905590506125578484610bb3565b6001600160a01b038086166000908152600960209081526040808320888516845290915290209190915582161561194b576125938484846112ed565b6001600160a01b039485166000818152600c602090815260408083209789168084529782528083209690981680835295815287822093909355908152600b82528581209481529381528484209284529190915291902055565b6040516001600160a01b03848116602483015283811660448301526064820183905261194b9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612964565b61265b611d2b565b6126648361138f565b6126ac5760405162461bcd60e51b815260206004820152601960248201527814dd185ada5b99c81d1bdad95b881b9bdd08185b1b1bddd959603a1b6044820152606401610a10565b600081116126ea5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610a10565b6126f58383836129cc565b816001600160a01b0316836001600160a01b03167f0d66f59c9991adc17dd3339490c5058d2d6fe20395e7b55ceb6ca8019a31667d8360405161273a91815260200190565b60405180910390a361274c6001600055565b505050565b612759611d2b565b6127628361138f565b6127aa5760405162461bcd60e51b815260206004820152601960248201527814dd185ada5b99c81d1bdad95b881b9bdd08185b1b1bddd959603a1b6044820152606401610a10565b6127b5838383612a4a565b816001600160a01b0316836001600160a01b03167f6ac2cd906088d873624fa62ca95170d967629e7d964651df19a3aa2e49b44aa18360405161273a91815260200190565b60006128046119a5565b54600160401b900460ff16919050565b6001600160a01b03811661285c5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b6044820152606401610a10565b61288b81610cac60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612e1a565b6128ba42610cac60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612e1a565b6128e943610cac60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612e1a565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b6040516001600160a01b0383811660248301526044820183905261274c91859182169063a9059cbb90606401612621565b600080602060008451602086016000885af180612987576040513d6000823e3d81fd5b50506000513d9150811561299f5780600114156129ac565b6001600160a01b0384163b155b1561194b5783604051635274afe760e01b8152600401610a109190612d89565b6129d68383612ab8565b6001600160a01b038316600090815260066020526040812080548392906129fe908490612e44565b90915550506001600160a01b03808416600090815260056020908152604080832093861683529290529081208054839290612a3a908490612e44565b9091555061274c90508383612470565b612a548383612ab8565b6001600160a01b03831660009081526006602052604081208054839290612a7c908490612e1a565b90915550506001600160a01b03808416600090815260056020908152604080832093861683529290529081208054839290612a3a908490612e1a565b6001600160a01b0382166000908152600d6020908152604080832080548251818502810185019093528083529192909190830182828015612b2257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b04575b505083519394506000925050505b81811015612b6457612b5c85848381518110612b4e57612b4e612e7c565b602002602001015186612517565b600101612b30565b5060025461194b9085906001600160a01b031685612517565b6001600160a01b038116811461220357600080fd5b8035612b9d81612b7d565b919050565b600060208284031215612bb457600080fd5b8135612bbf81612b7d565b9392505050565b600080600060608486031215612bdb57600080fd5b8335612be681612b7d565b92506020840135612bf681612b7d565b91506040840135612c0681612b7d565b809150509250925092565b60008060408385031215612c2457600080fd5b8235612c2f81612b7d565b91506020830135612c3f81612b7d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612c7357600080fd5b8235612c7e81612b7d565b915060208381013567ffffffffffffffff80821115612c9c57600080fd5b818601915086601f830112612cb057600080fd5b813581811115612cc257612cc2612c4a565b8060051b604051601f19603f83011681018181108582111715612ce757612ce7612c4a565b604052918252848201925083810185019189831115612d0557600080fd5b938501935b82851015612d2a57612d1b85612b92565b84529385019392850192612d0a565b8096505050505050509250929050565b60006020808352835180602085015260005b81811015612d6857858101830151858201604001528201612d4c565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b60008060408385031215612db057600080fd5b8235612dbb81612b7d565b946020939093013593505050565b600060208284031215612ddb57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082612e1557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561097e5761097e612de2565b808202811582820484141761097e5761097e612de2565b8082018082111561097e5761097e612de2565b6020808252600b908201526a139bdd08185b1b1bddd95960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ea457600080fd5b8151612bbf81612b7d565b600060208284031215612ec157600080fd5b81518015158114612bbf57600080fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215612ef957600080fd5b5051919050565b600060018201612f1257612f12612de2565b506001019056fea26469706673582212202c6b78f6051b4aa45ac1f1850c967f525df16c3e2dbcfbebdf3dd76acc3efaf764736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c806379251d8811610167578063bde4ad12116100ce578063e4dc2aa411610087578063e4dc2aa41461068a578063f2c2c2c9146106aa578063f77c4791146106bd578063f7888aec146106c5578063ff3a4ac0146106f0578063ffa1ad741461045d57600080fd5b8063bde4ad1214610600578063c588ee5b14610613578063c804a0191461063e578063dee1f0e414610651578063dffaf44914610664578063e270d1df1461067757600080fd5b80639d0bcca0116101205780639d0bcca014610565578063ab674e0c1461056d578063b02bf8d814610596578063b429afeb146105c7578063b5a18215146105da578063b66503cf146105ed57600080fd5b806379251d88146104e457806379d83f8e146104f75780637cc963801461050c57806381a4af1514610514578063884e0e6614610527578063936725ec1461045d57600080fd5b80633609582a1161020b5780635c0a1bf8116101c45780635c0a1bf8146104175780636180c3f9146104215780636210c7431461043457806365a9111c1461045d578063693d1dc21461048e5780636f4fcf71146104b957600080fd5b80633609582a14610398578063362a3fad146103ab57806339fee755146103be5780634593144c146103e95780634d9c6cb0146103f15780634fac6ccd1461040457600080fd5b806321985e131161025d57806321985e13146102fb5780632a9dd0ce1461030e5780632b72cee71461033f5780632f88b48d1461035257806331279d3d1461037d578063325a19f11461039057600080fd5b80630a441f7b1461029a5780630dc07112146102b55780630fb5a6b4146102d5578063184b9559146102de5780631ed24195146102f3575b600080fd5b6102a2610703565b6040519081526020015b60405180910390f35b6102a26102c3366004612ba2565b60036020526000908152604090205481565b6102a260015481565b6102f16102ec366004612bc6565b610716565b005b6102a2610867565b6102f1610309366004612ba2565b61087b565b6102a261031c366004612bc6565b600c60209081526000938452604080852082529284528284209052825290205481565b6102a261034d366004612c11565b610894565b6102a2610360366004612c11565b600960209081526000928352604080842090915290825290205481565b6102f161038b366004612c60565b610984565b6102a26109a5565b6102f16103a6366004612c11565b6109d9565b6102f16103b9366004612ba2565b610a47565b6102a26103cc366004612c11565b600a60209081526000928352604080842090915290825290205481565b6102a2610b83565b6102a26103ff366004612c11565b610bb3565b6102f1610412366004612ba2565b610bf1565b6102a262093a8081565b6102a261042f366004612c11565b610d23565b6102a2610442366004612ba2565b6001600160a01b03166000908152600d602052604090205490565b610481604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516102ac9190612d3a565b6102a261049c366004612c11565b600460209081526000928352604080842090915290825290205481565b6102a26104c7366004612c11565b600760209081526000928352604080842090915290825290205481565b6102f16104f2366004612c11565b610dbb565b6104ff611119565b6040516102ac9190612d89565b6102a2611132565b6104ff610522366004612d9d565b611162565b610555610535366004612c11565b600e60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102ac565b6104ff61119a565b6104ff61057b366004612ba2565b600f602052600090815260409020546001600160a01b031681565b6102a26105a4366004612bc6565b600b60209081526000938452604080852082529284528284209052825290205481565b6105556105d5366004612ba2565b6111ca565b6102a26105e8366004612c11565b6111ef565b6102f16105fb366004612d9d565b61121a565b6102a261060e366004612bc6565b6112ed565b6102a2610621366004612c11565b600860209081526000928352604080842090915290825290205481565b61055561064c366004612ba2565b61138f565b61055561065f366004612ba2565b6113b4565b6102f1610672366004612c11565b611439565b6102f1610685366004612dc9565b611695565b6102a2610698366004612ba2565b60066020526000908152604090205481565b6102f16106b8366004612ba2565b611855565b6104ff611951565b6102a26106d3366004612c11565b600560209081526000928352604080842090915290825290205481565b6002546104ff906001600160a01b031681565b600061070d611981565b60010154905090565b60006107206119a5565b805490915060ff600160401b820416159067ffffffffffffffff166000811580156107485750825b905060008267ffffffffffffffff1660011480156107655750303b155b905081158015610773575080155b156107915760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156107bb57845460ff60401b1916600160401b1785555b6107c9888762093a806119ce565b6001600160a01b0387166107f05760405163d92e233d60e01b815260040160405180910390fd5b866107f9611981565b80546001600160a01b0319166001600160a01b0392909216919091179055831561085d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600061087662093a8042612df8565b905090565b60405163a741a04560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600360205260408120548082036108e15750506001600160a01b038083166000908152600a602090815260408083209385168352929052205461097e565b6001600160a01b0380851660008181526007602090815260408083209488168084529482528083205493835260098252808320948352939052919091205482919061092c8787610bb3565b6109369190612e1a565b6109409190612e2d565b61094a9190612df8565b6001600160a01b038086166000908152600a602090815260408083209388168352929052205461097a9190612e44565b9150505b92915050565b6109a161098f611981565b546001600160a01b0316838381611a99565b5050565b60006108766109d560017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612e1a565b5490565b336001600160a01b03831614806109f457506109f4336113b4565b610a195760405162461bcd60e51b8152600401610a1090612e57565b60405180910390fd5b6001600160a01b039182166000908152600f6020526040902080546001600160a01b03191691909216179055565b6000610a51611981565b546001600160a01b03166000818152600d6020526040812080549293509190610a7b826001612e44565b67ffffffffffffffff811115610a9357610a93612c4a565b604051908082528060200260200182016040528015610abc578160200160208202803683370190505b50905060005b82811015610b2c57838181548110610adc57610adc612e7c565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610b0c57610b0c612e7c565b6001600160a01b0390921660209283029190910190910152600101610ac2565b5060025481516001600160a01b0390911690829084908110610b5057610b50612e7c565b60200260200101906001600160a01b031690816001600160a01b031681525050610b7c84868388611a99565b5050505050565b60006108766109d560017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612e1a565b6001600160a01b038083166000908152600860209081526040808320938516835292905290812054428111610be8578061097a565b50429392505050565b333014610c405760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e00000000006044820152606401610a10565b6000610c706109d560017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd612e1a565b610c7b906001612e44565b9050610caf81610cac60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd612e1a565b55565b610cde82610cac60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612e1a565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6001600160a01b038083166000908152600860209081526040808320938516835292905290812054428111610d5c57600091505061097e565b6000610d684283612e1a565b6001600160a01b03808716600090815260076020908152604080832093891683529290522054909150676765c793fa10079d601b1b90610da89083612e2d565b610db29190612df8565b95945050505050565b6000610dc5611951565b9050806001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190612e92565b6001600160a01b0316336001600160a01b03161480610eb05750604051631430d62960e21b81526001600160a01b038216906350c358a490610e6f903390600401612d89565b602060405180830381865afa158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190612eaf565b610ecc5760405162461bcd60e51b8152600401610a1090612e57565b6001600160a01b038084166000908152600860209081526040808320938616835292905220544211610f345760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610a10565b6001600160a01b038084166000908152600e602090815260408083209386168352929052205460ff16610f9c5760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610a10565b6001600160a01b038084166000818152600e602090815260408083209487168352938152838220805460ff19169055918152600d90915290812054905b8181101561103b576001600160a01b0385166000908152600d6020526040812080548390811061100b5761100b612e7c565b6000918252602090912001546001600160a01b03908116915085168103611032575061103b565b50600101610fd9565b6001600160a01b0385166000908152600d6020526040902061105e600184612e1a565b8154811061106e5761106e612e7c565b60009182526020808320909101546001600160a01b038881168452600d90925260409092208054919092169190839081106110ab576110ab612e7c565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559187168152600d909152604090208054806110f0576110f0612ed1565b600082815260209020810160001990810180546001600160a01b03191690550190555050505050565b6000611123611981565b546001600160a01b0316919050565b60006108766109d560017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd612e1a565b600d602052816000526040600020818154811061117e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006108766109d560017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612e1a565b60006111d4611951565b6001600160a01b0316826001600160a01b0316149050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b611222611d2b565b6002546001600160a01b039081169083160361125157604051639288929360e01b815260040160405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190611280903090600401612d89565b602060405180830381865afa15801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c19190612ee7565b90506112e26112ce611981565b546001600160a01b03168484600185611d55565b506109a16001600055565b6001600160a01b038084166000818152600c6020908152604080832087861680855290835281842095871680855295835281842054948452600b8352818420908452825280832094835293905291822054676765c793fa10079d601b1b906113558787610894565b61135f9190612e1a565b61136987866111ef565b6113739190612e2d565b61137d9190612df8565b6113879190612e44565b949350505050565b6000816001600160a01b03166113a3611981565b546001600160a01b03161492915050565b6000816001600160a01b03166113c8611951565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612e92565b6001600160a01b03161492915050565b6000611443611951565b9050806001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a79190612e92565b6001600160a01b0316336001600160a01b0316148061152e5750604051631430d62960e21b81526001600160a01b038216906350c358a4906114ed903390600401612d89565b602060405180830381865afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190612eaf565b61154a5760405162461bcd60e51b8152600401610a1090612e57565b6001600160a01b0383166000908152600d6020526040902054600a116115ab5760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e792072657761726420746f6b656e7360501b6044820152606401610a10565b6001600160a01b038084166000908152600e602090815260408083209386168352929052205460ff161580156115ef57506002546001600160a01b03838116911614155b6116305760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610a10565b506001600160a01b039182166000818152600e6020908152604080832094909516808352938152848220805460ff19166001908117909155928252600d81529381208054928301815581529290922090910180546001600160a01b0319169091179055565b600061169f611981565b905060006116ab610867565b9050808260010154106116d157604051638e8f3c7f60e01b815260040160405180910390fd5b6001820181905581546002546040516370a0823160e01b81526001600160a01b03928316929091169060009082906370a0823190611713903090600401612d89565b602060405180830381865afa158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117549190612ee7565b9050826001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03851691506370a08231906117d8903090600401612d89565b602060405180830381865afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190612ee7565b90508181118061182857508615155b1561184c5761184c611838611981565b546001600160a01b03168489600186611d55565b50505050505050565b3361185f8161138f565b61187e5780604051631160c15360e31b8152600401610a109190612d89565b6001600160a01b03808216600081815260056020908152604080832094871683529390528281205492516370a0823160e01b81529091906370a08231906118c9908790600401612d89565b602060405180830381865afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a9190612ee7565b90508082101561192d5761192883856119238585612e1a565b612113565b61194b565b8082111561194b5761194b83856119448486612e1a565b8415612170565b50505050565b60006108766109d560017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612e1a565b7f56fe937432a4b636174f357965a052660eeb836d7a87be456fd784604b73300090565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061097e565b6119d66121cb565b6119df836121f2565b6001600160a01b038216611a355760405162461bcd60e51b815260206004820152601960248201527f5a65726f2064656661756c742072657761726420746f6b656e000000000000006044820152606401610a10565b600280546001600160a01b0319166001600160a01b0384161790556000819003611a925760405162461bcd60e51b815260206004820152600e60248201526d3bb937b73390323ab930ba34b7b760911b6044820152606401610a10565b6001555050565b60025482516001600160a01b03909116906000805b82811015611afe57836001600160a01b0316868281518110611ad257611ad2612e7c565b60200260200101516001600160a01b031614611af65781611af281612f00565b9250505b600101611aae565b5060008115611b1757611b12868386612206565b611b19565b855b90508115611b2d57611b2d888883886122fe565b81831461085d576001600160a01b038086166000908152600f6020526040902054168015611b59578095505b6001600160a01b0386163314611b815760405162461bcd60e51b8152600401610a1090612e57565b611b8b8989612470565b611b9689868a612517565b6001600160a01b03808a166000908152600c6020908152604080832089851684528252808320938c16835292905220548015611ccc576001600160a01b038a81166000818152600c602090815260408083208b8616808552908352818420958f16845294909152808220919091555163095ea7b360e01b815260048101919091526024810183905263095ea7b3906044016020604051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190612eaf565b50604051626352e160e11b8152600481018290526001600160a01b0388811660248301528b169062c6a5c290604401600060405180830381600087803b158015611cb357600080fd5b505af1158015611cc7573d6000803e3d6000fd5b505050505b604080516001600160a01b038c8116825260208201849052898116828401529151888316928c16917f88744b3615a11586336358f196290c37189c924b0ce7f612d07789041af7cde4919081900360600190a350505050505050505050565b600260005403611d4e57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6002546001600160a01b0385811691161480611d9657506001600160a01b038086166000908152600e602090815260408083209388168352929052205460ff165b611dd65760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610a10565b611de285856000612517565b6001548215611e06578315611e0657611e066001600160a01b0386163330876125ec565b6040516370a0823160e01b815282906001600160a01b038716906370a0823190611e34903090600401612d89565b602060405180830381865afa158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e759190612ee7565b611e7f9190612e1a565b935060008411611ebf5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610a10565b6001600160a01b038087166000908152600860209081526040808320938916835292905220544210611f365780611f01676765c793fa10079d601b1b86612e2d565b611f0b9190612df8565b6001600160a01b038088166000908152600760209081526040808320938a168352929052205561206f565b6001600160a01b038087166000908152600860209081526040808320938916835292905290812054611f69904290612e1a565b6001600160a01b038089166000908152600760209081526040808320938b1683529290529081205491925090611f9f9083612e2d565b9050611fb6676765c793fa10079d601b1b82612df8565b861161201b5760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610a10565b8281612032676765c793fa10079d601b1b89612e2d565b61203c9190612e44565b6120469190612df8565b6001600160a01b03808a166000908152600760209081526040808320938c168352929052205550505b6001600160a01b03808716600090815260096020908152604080832093891683529290522042908190556120a4908290612e44565b6001600160a01b038781166000818152600860209081526040808320948b1680845294825291829020949094558051918252928101879052909133917f8bc5b8ae8531594dc64933af585227ad004b32082b540c609664369a112e2c18910160405180910390a3505050505050565b61211e838383612653565b816001600160a01b0316836001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628360405161216391815260200190565b60405180910390a3505050565b61217b848484612751565b6040805183815282151560208201526001600160a01b0380861692908716917f2b664ab52fe561d3ace376046aea39744dd736ec1f67d89d504ffd2192825f61910160405180910390a350505050565b6121d36127fa565b6121f057604051631afcd79f60e31b815260040160405180910390fd5b565b6121fa6121cb565b61220381612814565b50565b606060008367ffffffffffffffff81111561222357612223612c4a565b60405190808252806020026020018201604052801561224c578160200160208202803683370190505b508551909150600090815b818110156122f257856001600160a01b031688828151811061227b5761227b612e7c565b60200260200101516001600160a01b0316146122ea578781815181106122a3576122a3612e7c565b60200260200101518484806122b790612f00565b9550815181106122c9576122c9612e7c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b600101612257565b50919695505050505050565b612306611d2b565b6001600160a01b038082166000908152600f602052604090205416801561232b578091505b6001600160a01b03821633146123535760405162461bcd60e51b8152600401610a1090612e57565b61235d8585612470565b60005b835181101561246457600084828151811061237d5761237d612e7c565b60200260200101519050612392878288612517565b6001600160a01b038088166000908152600c6020908152604080832085851684528252808320938a16835292905220548015612407576001600160a01b038089166000908152600c60209081526040808320868516808552908352818420948c16845293909152812055612407908683612933565b604080516001600160a01b038a8116825260208201849052878116828401529151848316928a16917f88744b3615a11586336358f196290c37189c924b0ce7f612d07789041af7cde4919081900360600190a35050600101612360565b505061194b6001600055565b6001600160a01b038083166000818152600460209081526040808320948616835293815283822054928252600390529182208054919283926124b3908490612e1a565b909155506124c3905083836111ef565b6001600160a01b038085166000818152600460209081526040808320948816835293815283822085905591815260039091529081208054929350839290919061250d908490612e44565b9091555050505050565b60006125238484610894565b6001600160a01b038086166000908152600a6020908152604080832093881683529290522081905590506125578484610bb3565b6001600160a01b038086166000908152600960209081526040808320888516845290915290209190915582161561194b576125938484846112ed565b6001600160a01b039485166000818152600c602090815260408083209789168084529782528083209690981680835295815287822093909355908152600b82528581209481529381528484209284529190915291902055565b6040516001600160a01b03848116602483015283811660448301526064820183905261194b9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612964565b61265b611d2b565b6126648361138f565b6126ac5760405162461bcd60e51b815260206004820152601960248201527814dd185ada5b99c81d1bdad95b881b9bdd08185b1b1bddd959603a1b6044820152606401610a10565b600081116126ea5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610a10565b6126f58383836129cc565b816001600160a01b0316836001600160a01b03167f0d66f59c9991adc17dd3339490c5058d2d6fe20395e7b55ceb6ca8019a31667d8360405161273a91815260200190565b60405180910390a361274c6001600055565b505050565b612759611d2b565b6127628361138f565b6127aa5760405162461bcd60e51b815260206004820152601960248201527814dd185ada5b99c81d1bdad95b881b9bdd08185b1b1bddd959603a1b6044820152606401610a10565b6127b5838383612a4a565b816001600160a01b0316836001600160a01b03167f6ac2cd906088d873624fa62ca95170d967629e7d964651df19a3aa2e49b44aa18360405161273a91815260200190565b60006128046119a5565b54600160401b900460ff16919050565b6001600160a01b03811661285c5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b6044820152606401610a10565b61288b81610cac60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612e1a565b6128ba42610cac60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612e1a565b6128e943610cac60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612e1a565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b6040516001600160a01b0383811660248301526044820183905261274c91859182169063a9059cbb90606401612621565b600080602060008451602086016000885af180612987576040513d6000823e3d81fd5b50506000513d9150811561299f5780600114156129ac565b6001600160a01b0384163b155b1561194b5783604051635274afe760e01b8152600401610a109190612d89565b6129d68383612ab8565b6001600160a01b038316600090815260066020526040812080548392906129fe908490612e44565b90915550506001600160a01b03808416600090815260056020908152604080832093861683529290529081208054839290612a3a908490612e44565b9091555061274c90508383612470565b612a548383612ab8565b6001600160a01b03831660009081526006602052604081208054839290612a7c908490612e1a565b90915550506001600160a01b03808416600090815260056020908152604080832093861683529290529081208054839290612a3a908490612e1a565b6001600160a01b0382166000908152600d6020908152604080832080548251818502810185019093528083529192909190830182828015612b2257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b04575b505083519394506000925050505b81811015612b6457612b5c85848381518110612b4e57612b4e612e7c565b602002602001015186612517565b600101612b30565b5060025461194b9085906001600160a01b031685612517565b6001600160a01b038116811461220357600080fd5b8035612b9d81612b7d565b919050565b600060208284031215612bb457600080fd5b8135612bbf81612b7d565b9392505050565b600080600060608486031215612bdb57600080fd5b8335612be681612b7d565b92506020840135612bf681612b7d565b91506040840135612c0681612b7d565b809150509250925092565b60008060408385031215612c2457600080fd5b8235612c2f81612b7d565b91506020830135612c3f81612b7d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612c7357600080fd5b8235612c7e81612b7d565b915060208381013567ffffffffffffffff80821115612c9c57600080fd5b818601915086601f830112612cb057600080fd5b813581811115612cc257612cc2612c4a565b8060051b604051601f19603f83011681018181108582111715612ce757612ce7612c4a565b604052918252848201925083810185019189831115612d0557600080fd5b938501935b82851015612d2a57612d1b85612b92565b84529385019392850192612d0a565b8096505050505050509250929050565b60006020808352835180602085015260005b81811015612d6857858101830151858201604001528201612d4c565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b60008060408385031215612db057600080fd5b8235612dbb81612b7d565b946020939093013593505050565b600060208284031215612ddb57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082612e1557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561097e5761097e612de2565b808202811582820484141761097e5761097e612de2565b8082018082111561097e5761097e612de2565b6020808252600b908201526a139bdd08185b1b1bddd95960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ea457600080fd5b8151612bbf81612b7d565b600060208284031215612ec157600080fd5b81518015158114612bbf57600080fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215612ef957600080fd5b5051919050565b600060018201612f1257612f12612de2565b506001019056fea26469706673582212202c6b78f6051b4aa45ac1f1850c967f525df16c3e2dbcfbebdf3dd76acc3efaf764736f6c63430008170033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addStakingToken(address)": {
        "details": "Only one staking token (xMyrd) is allowed in the current implementation, it's already set in the constructor"
      },
      "created()": {
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "createdBlock()": {
        "returns": {
          "_0": "Creation block number"
        }
      },
      "derivedBalance(address,address)": {
        "details": "Balance of holder adjusted with specific rules for boost calculation.      Supposed to be implemented in a parent contract      Adjust user balance with some logic, like boost logic."
      },
      "earned(address,address,address)": {
        "details": "Approximate of earned rewards ready to claim"
      },
      "handleBalanceChange(address)": {
        "details": "Must be called from stakingToken when user balance changed."
      },
      "increaseRevision(address)": {
        "details": "Revision should be increased on each contract upgrade"
      },
      "init(address,address,address)": {
        "params": {
          "myrd_": "is default reward token",
          "xMyrd_": "is sole staking token"
        }
      },
      "isController(address)": {
        "details": "Return true if given address is controller"
      },
      "isStakeToken(address)": {
        "details": "Should return true for whitelisted reward tokens"
      },
      "lastTimeRewardApplicable(address,address)": {
        "details": "Returns the last time the reward was modified or periodFinish if the reward has ended"
      },
      "left(address,address)": {
        "details": "Amount of reward tokens left for the current period"
      },
      "previousImplementation()": {
        "details": "Previous logic implementation"
      },
      "registerRewardToken(address,address)": {
        "details": "Whitelist reward token for staking token. Only operator can do it."
      },
      "removeRewardToken(address,address)": {
        "details": "Remove from whitelist reward token for staking token. Only operator can do it.      We assume that default token can not be removed."
      },
      "revision()": {
        "details": "Contract upgrade counter"
      },
      "rewardPerToken(address,address)": {
        "details": "Reward paid for token for the current period."
      },
      "rewardTokensLength(address)": {
        "details": "Length of rewards tokens array for given token"
      },
      "setRewardsRedirect(address,address)": {
        "details": "Account or governance can setup a redirect of all rewards.      It needs for 3rd party contracts integrations."
      },
      "updatePeriod(uint256)": {
        "params": {
          "amount_": "Amount of MYRD-rewards for next period = amount_ + penalty received from xMyrd"
        }
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version of this contract. Adjust manually on each code modification."
      }
    },
    "title": "Stakeless pool for single staking token (xMyrd)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ShouldUseUpdatePeriod()": [
        {
          "notice": "Direct call of notifyRewardAmount for MYRD is not allowed, call updatePeriod(additionalMyrdAmount) instead"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "CONTROLLABLE_VERSION()": {
        "notice": "Version of the contract"
      },
      "addStakingToken(address)": {
        "notice": "Allowed contracts can whitelist token. Removing is forbidden."
      },
      "controller()": {
        "notice": "Return controller address saved in the contract slot"
      },
      "created()": {
        "notice": "Return creation timestamp"
      },
      "createdBlock()": {
        "notice": "Return creation block number"
      },
      "isGovernance(address)": {
        "notice": "Return true if given address is setup as governance in Controller"
      },
      "rewardsRedirect(address)": {
        "notice": "account => recipient. All rewards for this account will receive recipient"
      },
      "updatePeriod(uint256)": {
        "notice": "Update active period. Can be called only once per week. Call IXMyrd.rebase()"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17082,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8122,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "duration",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8125,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "defaultRewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8131,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "derivedSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8139,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "derivedBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8147,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8153,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8160,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "rewardRate",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8167,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "periodFinish",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8174,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8181,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8190,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 8199,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "rewards",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 8206,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8214,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8219,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "rewardsRedirect",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9304,
        "contract": "contracts/core/MultiGauge.sol:MultiGauge",
        "label": "__gap",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)38_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)38_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[38]",
        "numberOfBytes": "1216"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}